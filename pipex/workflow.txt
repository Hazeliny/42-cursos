Workflow of pipex

Mandatory part:

The pipe is a standard function command in the shell, similar to a real-world pipeline, that passes the output of one command to the input of the next command. This project aims to replicate the functionality of pipe. The basic part of this project involves executing only two commands. The execution command looks like this: ./pipex file1 cmd1 cmd2 file2. First, it checks if the number of arguments is 5; if it's not 5, the program exits immediately. If it is 5, the pipe function is called to create an integer two-dimensional array p_end (p_end[0] is the read end, and p_end[1] is the write end). Then, the fork function is called to create a new process. If it returns 0, the child process is entered; if it returns a non-zero value, the parent process is entered. However, before entering the parent process, it is necessary to call the wait or waitpid function to wait for the child process to finish, to avoid creating a zombie process and prevent race conditions or resource conflicts. In the child process, the open function is called to open the file file1, the dup2 function is called to set the standard input to the file descriptor of file1, and the standard output to the write end p_end[1]. In other words, the write end is redirected to the standard output, and then the read end p_end[0] is closed because it is not needed here. If it is not properly closed, the program might get stuck and nothing will be executed. Then, the command cmd1 is executed. Here, the execve function is called to execute the shell command, and the first parameter of execve is the command name to be executed, which must include the path. Therefore, it is necessary to extract the paths following "PATH=" from the environment variables, split them using the ":" symbol, and store them in a two-dimensional string array where each row is a path. The array is then iterated through, and the access function is called to check if cmd1 exists or is executable in the current path. If the command exists and is executable, execve is called to execute cmd1. In the main function, the waitpid function is called to wait for the child process to finish before entering the parent process. In the parent process, the file file2 is opened with read, write, and execute permissions (0777). Similarly, the read end p_end[0] is redirected to the standard input, and the file descriptor of file2 is redirected to the standard output, and the write end p_end[1] is closed because it is not needed here either. Then, the command cmd2 is executed. The pipeline process ends here.


El comando pipe es una función estándar en el shell, similar a una tubería en el mundo real, que pasa la salida de un comando como entrada al siguiente comando. Este proyecto tiene como objetivo replicar la funcionalidad de pipe. La parte básica de este proyecto involucra la ejecución de solo dos comandos. El comando de ejecución se ve así: ./pipex file1 cmd1 cmd2 file2. Primero, se verifica si el número de argumentos es 5; si no es 5, el programa se cierra inmediatamente. Si es 5, se llama a la función pipe para crear una matriz bidimensional de enteros p_end (p_end[0] es el extremo de lectura, y p_end[1] es el extremo de escritura). Luego, se llama a la función fork para crear un nuevo proceso. Si devuelve 0, se entra en el proceso hijo; si devuelve un valor distinto de cero, se entra en el proceso padre. Sin embargo, antes de entrar en el proceso padre, es necesario llamar a la función wait o waitpid para esperar a que el proceso hijo termine, para evitar crear un proceso zombi y prevenir condiciones de carrera o conflictos de recursos. En el proceso hijo, se llama a la función open para abrir el archivo file1, se llama a la función dup2 para configurar la entrada estándar al descriptor de archivo de file1, y la salida estándar al extremo de escritura p_end[1]. En otras palabras, el extremo de escritura se redirige a la salida estándar, y luego se cierra el extremo de lectura p_end[0] porque no se necesita aquí. Si no se cierra correctamente, el programa podría quedar atascado y no se ejecutará nada. Luego, se ejecuta el comando cmd1. Aquí, se llama a la función execve para ejecutar el comando del shell, y el primer parámetro de execve es el nombre del comando que se va a ejecutar, que debe incluir la ruta. Por lo tanto, es necesario extraer las rutas que siguen a "PATH=" de las variables de entorno, dividirlas usando el símbolo ":", y almacenarlas en una matriz bidimensional de cadenas donde cada fila es una ruta. Luego, se itera a través de la matriz, y se llama a la función access para verificar si cmd1 existe o es ejecutable en la ruta actual. Si el comando existe y es ejecutable, se llama a execve para ejecutar cmd1. En la función main, se llama a la función waitpid para esperar a que el proceso hijo termine antes de entrar en el proceso padre. En el proceso padre, se abre el archivo file2 con permisos de lectura, escritura y ejecución (0777). De manera similar, el extremo de lectura p_end[0] se redirige a la entrada estándar, y el descriptor de archivo de file2 se redirige a la salida estándar, y el extremo de escritura p_end[1] se cierra porque tampoco se necesita aquí. Luego, se ejecuta el comando cmd2. El proceso de la tubería termina aquí.


Bonus section:

One requirement is to handle the here_doc case. When executing the command ./pipex here_doc LIMITER cmd cmd1 file, the result should match the shell command cmd << LIMITER | cmd1 >> file. The LIMITER represents the marker that signifies the end of input, such as EOF. Another requirement is to set up multiple pipes, where the command ./pipex file1 cmd1 cmd2 cmd3 ... cmdn file2 should produce results identical to the shell command < file1 cmd1 | cmd2 | cmd3 ... | cmdn > file2.

As before, first, check whether the number of arguments is valid.

Start by handling the here_doc case. Call the open function to open file, set the mode to read/write/create, and to be consistent with the shell command, also set the mode to append content at the end of the file, with permissions set to read/write/execute. Next, call pipe to create the pipe, and fork to create a new process. If the returned pid is 0, enter the child process; if it is a positive integer, enter the parent process. Both processes execute almost simultaneously. In the child process, loop to get each line of input from the terminal's standard input, and as long as the content of the line is not equal to the LIMITER, output the line to the write end p_end[1] of the pipe. Meanwhile, in the parent process, close the write end p_end[1] that is not needed, and call dup2 to redirect the read end p_end[0] to the standard input. Then, call waitpid to wait for the child process to finish. After that, redirect the file's file descriptor to the standard output. Once all pipes are established, extract the commands cmd and cmd1 with full paths, and call execve to execute them one by one.

Next, handle the case of setting up multiple pipes. First, call the open function to open file1 and file2, redirect file1's file descriptor to the standard input, and similarly enter a loop to handle the commands cmd1, cmd2, cmd3, etc., one by one. For each command, establish a pipe, create a new process, and have the parent and child processes execute simultaneously. In the child process, close the read end, and redirect the write end to the standard output. In the parent process, close the write end, and redirect the read end to the standard input. The child process calls the execve function to execute the commands from cmd1 to cmd(n-1). Finally, the parent process redirects the file descriptor of file2 to the standard output and calls execve to execute the last command cmdn.

Execution completed.


Sección de Bonus:

Un requisito es manejar el caso de here_doc. Al ejecutar el comando ./pipex here_doc LIMITER cmd cmd1 file, el resultado debe coincidir con el comando del shell cmd << LIMITER | cmd1 >> file. El LIMITER representa la marca que señala el final de la entrada, como EOF. Otro requisito es configurar múltiples tuberías, donde el comando ./pipex file1 cmd1 cmd2 cmd3 ... cmdn file2 debería producir resultados idénticos al comando del shell < file1 cmd1 | cmd2 | cmd3 ... | cmdn > file2.

Como antes, primero verifica si el número de argumentos es válido.

Empieza manejando el caso de here_doc. Llama a la función open para abrir el file, establece el modo de lectura/escritura/creación, y para ser consistente con el comando del shell, también establece el modo de añadir contenido al final del archivo, con permisos establecidos para lectura/escritura/ejecución. Luego, llama a pipe para crear la tubería, y a fork para crear un nuevo proceso. Si el pid devuelto es 0, entra en el proceso hijo; si es un número positivo, entra en el proceso padre. Ambos procesos se ejecutan casi simultáneamente. En el proceso hijo, se obtiene cada línea de entrada desde la entrada estándar del terminal en un bucle, y mientras el contenido de la línea no sea igual a LIMITER, la línea se envía al extremo de escritura p_end[1] de la tubería. Mientras tanto, en el proceso padre, se cierra el extremo de escritura p_end[1] que no se necesita, y se llama a dup2 para redirigir el extremo de lectura p_end[0] a la entrada estándar. Luego, se llama a waitpid para esperar a que el proceso hijo termine. Después de eso, se redirige el descriptor de archivo de file a la salida estándar. Una vez que todas las tuberías están establecidas, se extraen los comandos cmd y cmd1 con rutas completas, y se llama a execve para ejecutarlos uno por uno.

A continuación, maneja el caso de configurar múltiples tuberías. Primero, llama a la función open para abrir file1 y file2, redirige el descriptor de archivo de file1 a la entrada estándar, y de manera similar, entra en un bucle para manejar los comandos cmd1, cmd2, cmd3, etc., uno por uno. Para cada comando, establece una tubería, crea un nuevo proceso, y hace que los procesos padre e hijo se ejecuten simultáneamente. En el proceso hijo, se cierra el extremo de lectura y se redirige el extremo de escritura a la salida estándar. En el proceso padre, se cierra el extremo de escritura y se redirige el extremo de lectura a la entrada estándar. El proceso hijo llama a la función execve para ejecutar los comandos desde cmd1 hasta cmd(n-1). Finalmente, el proceso padre redirige el descriptor de archivo de file2 a la salida estándar y llama a execve para ejecutar el último comando cmdn.

Ejecución completada.

