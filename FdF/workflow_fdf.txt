Workflow of FdF

I have two stacks, a and b. First, I check the number of arguments received from the main function. If there are fewer than 2 arguments or if there are exactly 2 arguments but the first one is empty, I return 1 and exit the program. If the number of arguments is 2 and the first argument is not empty, or if there are more than 2 arguments, I parse them into a two-dimensional array and then store them one by one into stack a, forming nodes, i.e., initializing stack a. Specifically, I first check if these nodes contain non-integer characters, if the values exceed the range of integers that can be processed, or if there are duplicate values. If any of these issues are present, I handle the error. If all input arguments are valid numbers, I add them sequentially into linked list a (also referred to as stack a) as nodes. If an error occurs during the initialization of stack a, I release the already added linked list nodes, output an error message, and exit the program. After initializing stack a, I release the two-dimensional array because I used malloc when creating it. Note that during the initialization of stack a, the first value in the input arguments is placed in the first node, which I call the top node of the stack, and so on, with the last value in the input being placed in the last node of stack a, which I call the bottom node of the stack. The result we want to achieve is to sort the values of all nodes in stack a in ascending order from top to bottom. Next, we handle the sorting algorithm for the node values in stack a. First, I check if the node values in stack a are already sorted in ascending order. If not, we determine the total number of nodes in stack a. If there are only 2 nodes, I directly swap the positions of the two nodes. If there are 3 nodes, I use a simple sorting method to improve the efficiency of the program execution. If stack a has more than 3 nodes, I use a complex sorting function. First, I sequentially move the top two nodes from stack a to stack b. Then, for each node value in stack a, I find the corresponding target node in stack b (the target node is the node in stack b that is smaller than the node value in stack a but closest to it, i.e., the closest smaller node). If no such node is found, the largest value in b is the target node for the node in a. The third step is to calculate the cost of pushing nodes from stack a to stack b, find the node with the lowest cost, and push it to b until only 3 nodes remain in stack a. The fourth step is to sort the 3 nodes in a in ascending order. The fifth step is to push the nodes from b back to a. First, I find the target node for each node in b in stack a, i.e., the closest bigger target value. If no such node is found, the smallest value in a is its target node. If the target node is at the top of stack a, directly push the node from b to a. But if the target node is not at the top of stack a, we split the nodes in stack a into two, draw a median line, and thus I use config_node_a to set the index of each node and whether its above_mid is true or false. If the target node's above_mid is true, rotate a and push it from b to a. If its above_mid is false, reverse rotate a and push it from b to a until all nodes in b are pushed back to a. The final step is to move the smallest number to the top, judging by whether its above_mid is true for ra and false for rra. Sorting is complete. Finally, in the main function, free the two stacks.

Tengo dos pilas, a y b. Primero, verifico el número de argumentos recibidos desde la función principal. Si hay menos de 2 argumentos o si hay exactamente 2 argumentos pero el primero está vacío, devuelvo 1 y termino el programa. Si el número de argumentos es 2 y el primer argumento no está vacío, o si hay más de 2 argumentos, los analizo en una matriz bidimensional y luego los almaceno uno por uno en la pila a, formando nodos, es decir, inicializando la pila a. Específicamente, primero verifico si estos nodos contienen caracteres no enteros, si los valores superan el rango de enteros que se pueden procesar o si hay valores duplicados. Si alguno de estos problemas está presente, manejo el error. Si todos los argumentos de entrada son números válidos, los agrego secuencialmente en la lista enlazada a (también llamada pila a) como nodos. Si ocurre un error durante la inicialización de la pila a, libero los nodos de la lista enlazada ya agregados, muestro un mensaje de error y termino el programa. Después de inicializar la pila a, libero la matriz bidimensional porque usé malloc al crearla. Tenga en cuenta que durante la inicialización de la pila a, el primer valor de los argumentos de entrada se coloca en el primer nodo, al que llamo el nodo superior de la pila, y así sucesivamente, con el último valor de la entrada colocándose en el último nodo de la pila a, al que llamo el nodo inferior de la pila. El resultado que queremos lograr es ordenar los valores de todos los nodos en la pila a en orden ascendente de arriba a abajo. A continuación, manejamos el algoritmo de ordenación para los valores de los nodos en la pila a. Primero, verifico si los valores de los nodos en la pila a ya están ordenados en orden ascendente. Si no, determinamos el número total de nodos en la pila a. Si solo hay 2 nodos, intercambio directamente las posiciones de los dos nodos. Si hay 3 nodos, utilizo un método de ordenación simple para mejorar la eficiencia de la ejecución del programa. Si la pila a tiene más de 3 nodos, utilizo una función de ordenación compleja. Primero, muevo secuencialmente los dos nodos superiores de la pila a a la pila b. Luego, para cada valor de nodo en la pila a, encuentro el nodo objetivo correspondiente en la pila b (el nodo objetivo es el nodo en la pila b que es más pequeño que el valor del nodo en a pero más cercano a él, es decir, el nodo más pequeño más cercano). Si no se encuentra tal nodo, el valor más grande en b es el nodo objetivo para el nodo en a. El tercer paso es calcular el costo de empujar los nodos de la pila a a la pila b, encontrar el nodo con el costo más bajo y empujarlo a b hasta que solo queden 3 nodos en la pila a. El cuarto paso es ordenar los 3 nodos en a en orden ascendente. El quinto paso es empujar los nodos de b de vuelta a a. Primero, encuentro el nodo objetivo para cada nodo en b en la pila a, es decir, el valor objetivo más cercano. Si no se encuentra tal nodo, el valor más pequeño en a es su nodo objetivo. Si el nodo objetivo está en la parte superior de la pila a, empuje directamente el nodo de b a a. Pero si el nodo objetivo no está en la parte superior de la pila a, dividimos los nodos en la pila a en dos, trazamos una línea media, y así utilizo config_node_a para establecer el índice de cada nodo y si su above_mid es verdadero o falso. Si el above_mid del nodo objetivo es verdadero, rota a y empújalo de b a a. Si su above_mid es falso, rota inversamente a y empújalo de b a a hasta que todos los nodos en b sean empujados de vuelta a a. El último paso es mover el número más pequeño a la parte superior, juzgando si su above_mid es verdadero para ra y falso para rra. La ordenación está completa. Finalmente, en la función principal, libero las dos pilas.

The formula for the push cost is: the total cost of bringing the node in stack a to the top and bringing the target node in stack b to the top. If the node in a has above_mid as true, the cost to move this node in a to the top is its index. If its above_mid is false, the cost to move this node in a to the top is the length of stack a minus its index. Similarly, if the target node of this node in b has above_mid as true, the cost to move the target node in b to the top is its index. If the above_mid of the target node in b is false, the cost to move the target node in b to the top is the length of stack b minus its index. Finally, the total push cost for each node is the sum of the cost of moving the node in a to the top and the cost of moving the target node in b to the top. The node with the minimum total push cost is marked with cheapest as true.

La fórmula para el costo de empuje es: el costo total de llevar el nodo en la pila a a la parte superior y llevar el nodo objetivo en la pila b a la parte superior. Si el nodo en a tiene above_mid como verdadero, el costo de mover este nodo en a a la parte superior es su índice. Si su above_mid es falso, el costo de mover este nodo en a a la parte superior es la longitud de la pila a menos su índice. Del mismo modo, si el nodo objetivo de este nodo en b tiene above_mid como verdadero, el costo de mover el nodo objetivo en b a la parte superior es su índice. Si el above_mid del nodo objetivo en b es falso, el costo de mover el nodo objetivo en b a la parte superior es la longitud de la pila b menos su índice. Finalmente, el costo total de empuje para cada nodo es la suma del costo de mover el nodo en a a la parte superior y el costo de mover el nodo objetivo en b a la parte superior. El nodo con el costo total de empuje mínimo se marca con cheapest como verdadero.
